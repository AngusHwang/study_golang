// Code generated by entc, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"odin/ent/artist"
	"odin/ent/menu"
	"odin/ent/partnership"
	"odin/ent/predicate"
	"odin/ent/store"
	"odin/ent/user"
	"time"
)

// ArtistWhereInput represents a where input for filtering Artist queries.
type ArtistWhereInput struct {
	Predicates []predicate.Artist  `json:"-"`
	Not        *ArtistWhereInput   `json:"not,omitempty"`
	Or         []*ArtistWhereInput `json:"or,omitempty"`
	And        []*ArtistWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "external_url" field predicates.
	ExternalURL             *string  `json:"externalURL,omitempty"`
	ExternalURLNEQ          *string  `json:"externalURLNEQ,omitempty"`
	ExternalURLIn           []string `json:"externalURLIn,omitempty"`
	ExternalURLNotIn        []string `json:"externalURLNotIn,omitempty"`
	ExternalURLGT           *string  `json:"externalURLGT,omitempty"`
	ExternalURLGTE          *string  `json:"externalURLGTE,omitempty"`
	ExternalURLLT           *string  `json:"externalURLLT,omitempty"`
	ExternalURLLTE          *string  `json:"externalURLLTE,omitempty"`
	ExternalURLContains     *string  `json:"externalURLContains,omitempty"`
	ExternalURLHasPrefix    *string  `json:"externalURLHasPrefix,omitempty"`
	ExternalURLHasSuffix    *string  `json:"externalURLHasSuffix,omitempty"`
	ExternalURLEqualFold    *string  `json:"externalURLEqualFold,omitempty"`
	ExternalURLContainsFold *string  `json:"externalURLContainsFold,omitempty"`

	// "phone_number" field predicates.
	PhoneNumber             *string  `json:"phoneNumber,omitempty"`
	PhoneNumberNEQ          *string  `json:"phoneNumberNEQ,omitempty"`
	PhoneNumberIn           []string `json:"phoneNumberIn,omitempty"`
	PhoneNumberNotIn        []string `json:"phoneNumberNotIn,omitempty"`
	PhoneNumberGT           *string  `json:"phoneNumberGT,omitempty"`
	PhoneNumberGTE          *string  `json:"phoneNumberGTE,omitempty"`
	PhoneNumberLT           *string  `json:"phoneNumberLT,omitempty"`
	PhoneNumberLTE          *string  `json:"phoneNumberLTE,omitempty"`
	PhoneNumberContains     *string  `json:"phoneNumberContains,omitempty"`
	PhoneNumberHasPrefix    *string  `json:"phoneNumberHasPrefix,omitempty"`
	PhoneNumberHasSuffix    *string  `json:"phoneNumberHasSuffix,omitempty"`
	PhoneNumberEqualFold    *string  `json:"phoneNumberEqualFold,omitempty"`
	PhoneNumberContainsFold *string  `json:"phoneNumberContainsFold,omitempty"`

	// "discord" field predicates.
	Discord             *string  `json:"discord,omitempty"`
	DiscordNEQ          *string  `json:"discordNEQ,omitempty"`
	DiscordIn           []string `json:"discordIn,omitempty"`
	DiscordNotIn        []string `json:"discordNotIn,omitempty"`
	DiscordGT           *string  `json:"discordGT,omitempty"`
	DiscordGTE          *string  `json:"discordGTE,omitempty"`
	DiscordLT           *string  `json:"discordLT,omitempty"`
	DiscordLTE          *string  `json:"discordLTE,omitempty"`
	DiscordContains     *string  `json:"discordContains,omitempty"`
	DiscordHasPrefix    *string  `json:"discordHasPrefix,omitempty"`
	DiscordHasSuffix    *string  `json:"discordHasSuffix,omitempty"`
	DiscordIsNil        bool     `json:"discordIsNil,omitempty"`
	DiscordNotNil       bool     `json:"discordNotNil,omitempty"`
	DiscordEqualFold    *string  `json:"discordEqualFold,omitempty"`
	DiscordContainsFold *string  `json:"discordContainsFold,omitempty"`

	// "recommender" field predicates.
	Recommender             *string  `json:"recommender,omitempty"`
	RecommenderNEQ          *string  `json:"recommenderNEQ,omitempty"`
	RecommenderIn           []string `json:"recommenderIn,omitempty"`
	RecommenderNotIn        []string `json:"recommenderNotIn,omitempty"`
	RecommenderGT           *string  `json:"recommenderGT,omitempty"`
	RecommenderGTE          *string  `json:"recommenderGTE,omitempty"`
	RecommenderLT           *string  `json:"recommenderLT,omitempty"`
	RecommenderLTE          *string  `json:"recommenderLTE,omitempty"`
	RecommenderContains     *string  `json:"recommenderContains,omitempty"`
	RecommenderHasPrefix    *string  `json:"recommenderHasPrefix,omitempty"`
	RecommenderHasSuffix    *string  `json:"recommenderHasSuffix,omitempty"`
	RecommenderIsNil        bool     `json:"recommenderIsNil,omitempty"`
	RecommenderNotNil       bool     `json:"recommenderNotNil,omitempty"`
	RecommenderEqualFold    *string  `json:"recommenderEqualFold,omitempty"`
	RecommenderContainsFold *string  `json:"recommenderContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ArtistWhereInput) AddPredicates(predicates ...predicate.Artist) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ArtistWhereInput filter on the ArtistQuery builder.
func (i *ArtistWhereInput) Filter(q *ArtistQuery) (*ArtistQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyArtistWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyArtistWhereInput is returned in case the ArtistWhereInput is empty.
var ErrEmptyArtistWhereInput = errors.New("ent: empty predicate ArtistWhereInput")

// P returns a predicate for filtering artists.
// An error is returned if the input is empty or invalid.
func (i *ArtistWhereInput) P() (predicate.Artist, error) {
	var predicates []predicate.Artist
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, artist.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Artist, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, artist.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Artist, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, artist.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, artist.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, artist.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, artist.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, artist.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, artist.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, artist.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, artist.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, artist.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, artist.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, artist.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, artist.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, artist.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, artist.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, artist.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, artist.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, artist.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, artist.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, artist.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, artist.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, artist.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, artist.NameContainsFold(*i.NameContainsFold))
	}
	if i.ExternalURL != nil {
		predicates = append(predicates, artist.ExternalURLEQ(*i.ExternalURL))
	}
	if i.ExternalURLNEQ != nil {
		predicates = append(predicates, artist.ExternalURLNEQ(*i.ExternalURLNEQ))
	}
	if len(i.ExternalURLIn) > 0 {
		predicates = append(predicates, artist.ExternalURLIn(i.ExternalURLIn...))
	}
	if len(i.ExternalURLNotIn) > 0 {
		predicates = append(predicates, artist.ExternalURLNotIn(i.ExternalURLNotIn...))
	}
	if i.ExternalURLGT != nil {
		predicates = append(predicates, artist.ExternalURLGT(*i.ExternalURLGT))
	}
	if i.ExternalURLGTE != nil {
		predicates = append(predicates, artist.ExternalURLGTE(*i.ExternalURLGTE))
	}
	if i.ExternalURLLT != nil {
		predicates = append(predicates, artist.ExternalURLLT(*i.ExternalURLLT))
	}
	if i.ExternalURLLTE != nil {
		predicates = append(predicates, artist.ExternalURLLTE(*i.ExternalURLLTE))
	}
	if i.ExternalURLContains != nil {
		predicates = append(predicates, artist.ExternalURLContains(*i.ExternalURLContains))
	}
	if i.ExternalURLHasPrefix != nil {
		predicates = append(predicates, artist.ExternalURLHasPrefix(*i.ExternalURLHasPrefix))
	}
	if i.ExternalURLHasSuffix != nil {
		predicates = append(predicates, artist.ExternalURLHasSuffix(*i.ExternalURLHasSuffix))
	}
	if i.ExternalURLEqualFold != nil {
		predicates = append(predicates, artist.ExternalURLEqualFold(*i.ExternalURLEqualFold))
	}
	if i.ExternalURLContainsFold != nil {
		predicates = append(predicates, artist.ExternalURLContainsFold(*i.ExternalURLContainsFold))
	}
	if i.PhoneNumber != nil {
		predicates = append(predicates, artist.PhoneNumberEQ(*i.PhoneNumber))
	}
	if i.PhoneNumberNEQ != nil {
		predicates = append(predicates, artist.PhoneNumberNEQ(*i.PhoneNumberNEQ))
	}
	if len(i.PhoneNumberIn) > 0 {
		predicates = append(predicates, artist.PhoneNumberIn(i.PhoneNumberIn...))
	}
	if len(i.PhoneNumberNotIn) > 0 {
		predicates = append(predicates, artist.PhoneNumberNotIn(i.PhoneNumberNotIn...))
	}
	if i.PhoneNumberGT != nil {
		predicates = append(predicates, artist.PhoneNumberGT(*i.PhoneNumberGT))
	}
	if i.PhoneNumberGTE != nil {
		predicates = append(predicates, artist.PhoneNumberGTE(*i.PhoneNumberGTE))
	}
	if i.PhoneNumberLT != nil {
		predicates = append(predicates, artist.PhoneNumberLT(*i.PhoneNumberLT))
	}
	if i.PhoneNumberLTE != nil {
		predicates = append(predicates, artist.PhoneNumberLTE(*i.PhoneNumberLTE))
	}
	if i.PhoneNumberContains != nil {
		predicates = append(predicates, artist.PhoneNumberContains(*i.PhoneNumberContains))
	}
	if i.PhoneNumberHasPrefix != nil {
		predicates = append(predicates, artist.PhoneNumberHasPrefix(*i.PhoneNumberHasPrefix))
	}
	if i.PhoneNumberHasSuffix != nil {
		predicates = append(predicates, artist.PhoneNumberHasSuffix(*i.PhoneNumberHasSuffix))
	}
	if i.PhoneNumberEqualFold != nil {
		predicates = append(predicates, artist.PhoneNumberEqualFold(*i.PhoneNumberEqualFold))
	}
	if i.PhoneNumberContainsFold != nil {
		predicates = append(predicates, artist.PhoneNumberContainsFold(*i.PhoneNumberContainsFold))
	}
	if i.Discord != nil {
		predicates = append(predicates, artist.DiscordEQ(*i.Discord))
	}
	if i.DiscordNEQ != nil {
		predicates = append(predicates, artist.DiscordNEQ(*i.DiscordNEQ))
	}
	if len(i.DiscordIn) > 0 {
		predicates = append(predicates, artist.DiscordIn(i.DiscordIn...))
	}
	if len(i.DiscordNotIn) > 0 {
		predicates = append(predicates, artist.DiscordNotIn(i.DiscordNotIn...))
	}
	if i.DiscordGT != nil {
		predicates = append(predicates, artist.DiscordGT(*i.DiscordGT))
	}
	if i.DiscordGTE != nil {
		predicates = append(predicates, artist.DiscordGTE(*i.DiscordGTE))
	}
	if i.DiscordLT != nil {
		predicates = append(predicates, artist.DiscordLT(*i.DiscordLT))
	}
	if i.DiscordLTE != nil {
		predicates = append(predicates, artist.DiscordLTE(*i.DiscordLTE))
	}
	if i.DiscordContains != nil {
		predicates = append(predicates, artist.DiscordContains(*i.DiscordContains))
	}
	if i.DiscordHasPrefix != nil {
		predicates = append(predicates, artist.DiscordHasPrefix(*i.DiscordHasPrefix))
	}
	if i.DiscordHasSuffix != nil {
		predicates = append(predicates, artist.DiscordHasSuffix(*i.DiscordHasSuffix))
	}
	if i.DiscordIsNil {
		predicates = append(predicates, artist.DiscordIsNil())
	}
	if i.DiscordNotNil {
		predicates = append(predicates, artist.DiscordNotNil())
	}
	if i.DiscordEqualFold != nil {
		predicates = append(predicates, artist.DiscordEqualFold(*i.DiscordEqualFold))
	}
	if i.DiscordContainsFold != nil {
		predicates = append(predicates, artist.DiscordContainsFold(*i.DiscordContainsFold))
	}
	if i.Recommender != nil {
		predicates = append(predicates, artist.RecommenderEQ(*i.Recommender))
	}
	if i.RecommenderNEQ != nil {
		predicates = append(predicates, artist.RecommenderNEQ(*i.RecommenderNEQ))
	}
	if len(i.RecommenderIn) > 0 {
		predicates = append(predicates, artist.RecommenderIn(i.RecommenderIn...))
	}
	if len(i.RecommenderNotIn) > 0 {
		predicates = append(predicates, artist.RecommenderNotIn(i.RecommenderNotIn...))
	}
	if i.RecommenderGT != nil {
		predicates = append(predicates, artist.RecommenderGT(*i.RecommenderGT))
	}
	if i.RecommenderGTE != nil {
		predicates = append(predicates, artist.RecommenderGTE(*i.RecommenderGTE))
	}
	if i.RecommenderLT != nil {
		predicates = append(predicates, artist.RecommenderLT(*i.RecommenderLT))
	}
	if i.RecommenderLTE != nil {
		predicates = append(predicates, artist.RecommenderLTE(*i.RecommenderLTE))
	}
	if i.RecommenderContains != nil {
		predicates = append(predicates, artist.RecommenderContains(*i.RecommenderContains))
	}
	if i.RecommenderHasPrefix != nil {
		predicates = append(predicates, artist.RecommenderHasPrefix(*i.RecommenderHasPrefix))
	}
	if i.RecommenderHasSuffix != nil {
		predicates = append(predicates, artist.RecommenderHasSuffix(*i.RecommenderHasSuffix))
	}
	if i.RecommenderIsNil {
		predicates = append(predicates, artist.RecommenderIsNil())
	}
	if i.RecommenderNotNil {
		predicates = append(predicates, artist.RecommenderNotNil())
	}
	if i.RecommenderEqualFold != nil {
		predicates = append(predicates, artist.RecommenderEqualFold(*i.RecommenderEqualFold))
	}
	if i.RecommenderContainsFold != nil {
		predicates = append(predicates, artist.RecommenderContainsFold(*i.RecommenderContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, artist.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, artist.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, artist.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, artist.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, artist.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, artist.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, artist.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, artist.CreatedAtLTE(*i.CreatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyArtistWhereInput
	case 1:
		return predicates[0], nil
	default:
		return artist.And(predicates...), nil
	}
}

// MenuWhereInput represents a where input for filtering Menu queries.
type MenuWhereInput struct {
	Predicates []predicate.Menu  `json:"-"`
	Not        *MenuWhereInput   `json:"not,omitempty"`
	Or         []*MenuWhereInput `json:"or,omitempty"`
	And        []*MenuWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MenuWhereInput) AddPredicates(predicates ...predicate.Menu) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MenuWhereInput filter on the MenuQuery builder.
func (i *MenuWhereInput) Filter(q *MenuQuery) (*MenuQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMenuWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMenuWhereInput is returned in case the MenuWhereInput is empty.
var ErrEmptyMenuWhereInput = errors.New("ent: empty predicate MenuWhereInput")

// P returns a predicate for filtering menus.
// An error is returned if the input is empty or invalid.
func (i *MenuWhereInput) P() (predicate.Menu, error) {
	var predicates []predicate.Menu
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, menu.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Menu, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, menu.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Menu, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, menu.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, menu.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, menu.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, menu.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, menu.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, menu.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, menu.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, menu.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, menu.IDLTE(*i.IDLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMenuWhereInput
	case 1:
		return predicates[0], nil
	default:
		return menu.And(predicates...), nil
	}
}

// PartnershipWhereInput represents a where input for filtering Partnership queries.
type PartnershipWhereInput struct {
	Predicates []predicate.Partnership  `json:"-"`
	Not        *PartnershipWhereInput   `json:"not,omitempty"`
	Or         []*PartnershipWhereInput `json:"or,omitempty"`
	And        []*PartnershipWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "company" field predicates.
	Company             *string  `json:"company,omitempty"`
	CompanyNEQ          *string  `json:"companyNEQ,omitempty"`
	CompanyIn           []string `json:"companyIn,omitempty"`
	CompanyNotIn        []string `json:"companyNotIn,omitempty"`
	CompanyGT           *string  `json:"companyGT,omitempty"`
	CompanyGTE          *string  `json:"companyGTE,omitempty"`
	CompanyLT           *string  `json:"companyLT,omitempty"`
	CompanyLTE          *string  `json:"companyLTE,omitempty"`
	CompanyContains     *string  `json:"companyContains,omitempty"`
	CompanyHasPrefix    *string  `json:"companyHasPrefix,omitempty"`
	CompanyHasSuffix    *string  `json:"companyHasSuffix,omitempty"`
	CompanyEqualFold    *string  `json:"companyEqualFold,omitempty"`
	CompanyContainsFold *string  `json:"companyContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentIsNil        bool     `json:"contentIsNil,omitempty"`
	ContentNotNil       bool     `json:"contentNotNil,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PartnershipWhereInput) AddPredicates(predicates ...predicate.Partnership) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PartnershipWhereInput filter on the PartnershipQuery builder.
func (i *PartnershipWhereInput) Filter(q *PartnershipQuery) (*PartnershipQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPartnershipWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPartnershipWhereInput is returned in case the PartnershipWhereInput is empty.
var ErrEmptyPartnershipWhereInput = errors.New("ent: empty predicate PartnershipWhereInput")

// P returns a predicate for filtering partnerships.
// An error is returned if the input is empty or invalid.
func (i *PartnershipWhereInput) P() (predicate.Partnership, error) {
	var predicates []predicate.Partnership
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, partnership.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Partnership, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, partnership.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Partnership, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, partnership.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, partnership.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, partnership.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, partnership.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, partnership.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, partnership.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, partnership.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, partnership.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, partnership.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, partnership.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, partnership.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, partnership.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, partnership.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, partnership.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, partnership.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, partnership.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, partnership.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, partnership.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, partnership.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, partnership.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, partnership.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, partnership.NameContainsFold(*i.NameContainsFold))
	}
	if i.Company != nil {
		predicates = append(predicates, partnership.CompanyEQ(*i.Company))
	}
	if i.CompanyNEQ != nil {
		predicates = append(predicates, partnership.CompanyNEQ(*i.CompanyNEQ))
	}
	if len(i.CompanyIn) > 0 {
		predicates = append(predicates, partnership.CompanyIn(i.CompanyIn...))
	}
	if len(i.CompanyNotIn) > 0 {
		predicates = append(predicates, partnership.CompanyNotIn(i.CompanyNotIn...))
	}
	if i.CompanyGT != nil {
		predicates = append(predicates, partnership.CompanyGT(*i.CompanyGT))
	}
	if i.CompanyGTE != nil {
		predicates = append(predicates, partnership.CompanyGTE(*i.CompanyGTE))
	}
	if i.CompanyLT != nil {
		predicates = append(predicates, partnership.CompanyLT(*i.CompanyLT))
	}
	if i.CompanyLTE != nil {
		predicates = append(predicates, partnership.CompanyLTE(*i.CompanyLTE))
	}
	if i.CompanyContains != nil {
		predicates = append(predicates, partnership.CompanyContains(*i.CompanyContains))
	}
	if i.CompanyHasPrefix != nil {
		predicates = append(predicates, partnership.CompanyHasPrefix(*i.CompanyHasPrefix))
	}
	if i.CompanyHasSuffix != nil {
		predicates = append(predicates, partnership.CompanyHasSuffix(*i.CompanyHasSuffix))
	}
	if i.CompanyEqualFold != nil {
		predicates = append(predicates, partnership.CompanyEqualFold(*i.CompanyEqualFold))
	}
	if i.CompanyContainsFold != nil {
		predicates = append(predicates, partnership.CompanyContainsFold(*i.CompanyContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, partnership.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, partnership.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, partnership.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, partnership.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, partnership.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, partnership.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, partnership.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, partnership.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, partnership.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, partnership.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, partnership.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, partnership.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, partnership.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, partnership.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, partnership.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, partnership.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, partnership.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, partnership.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, partnership.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, partnership.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, partnership.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, partnership.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, partnership.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, partnership.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentIsNil {
		predicates = append(predicates, partnership.ContentIsNil())
	}
	if i.ContentNotNil {
		predicates = append(predicates, partnership.ContentNotNil())
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, partnership.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, partnership.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, partnership.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, partnership.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, partnership.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, partnership.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, partnership.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, partnership.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, partnership.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, partnership.CreatedAtLTE(*i.CreatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPartnershipWhereInput
	case 1:
		return predicates[0], nil
	default:
		return partnership.And(predicates...), nil
	}
}

// StoreWhereInput represents a where input for filtering Store queries.
type StoreWhereInput struct {
	Predicates []predicate.Store  `json:"-"`
	Not        *StoreWhereInput   `json:"not,omitempty"`
	Or         []*StoreWhereInput `json:"or,omitempty"`
	And        []*StoreWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "location" field predicates.
	Location             *string  `json:"location,omitempty"`
	LocationNEQ          *string  `json:"locationNEQ,omitempty"`
	LocationIn           []string `json:"locationIn,omitempty"`
	LocationNotIn        []string `json:"locationNotIn,omitempty"`
	LocationGT           *string  `json:"locationGT,omitempty"`
	LocationGTE          *string  `json:"locationGTE,omitempty"`
	LocationLT           *string  `json:"locationLT,omitempty"`
	LocationLTE          *string  `json:"locationLTE,omitempty"`
	LocationContains     *string  `json:"locationContains,omitempty"`
	LocationHasPrefix    *string  `json:"locationHasPrefix,omitempty"`
	LocationHasSuffix    *string  `json:"locationHasSuffix,omitempty"`
	LocationEqualFold    *string  `json:"locationEqualFold,omitempty"`
	LocationContainsFold *string  `json:"locationContainsFold,omitempty"`

	// "on_foot" field predicates.
	OnFoot       *int  `json:"onFoot,omitempty"`
	OnFootNEQ    *int  `json:"onFootNEQ,omitempty"`
	OnFootIn     []int `json:"onFootIn,omitempty"`
	OnFootNotIn  []int `json:"onFootNotIn,omitempty"`
	OnFootGT     *int  `json:"onFootGT,omitempty"`
	OnFootGTE    *int  `json:"onFootGTE,omitempty"`
	OnFootLT     *int  `json:"onFootLT,omitempty"`
	OnFootLTE    *int  `json:"onFootLTE,omitempty"`
	OnFootIsNil  bool  `json:"onFootIsNil,omitempty"`
	OnFootNotNil bool  `json:"onFootNotNil,omitempty"`

	// "sent_at" field predicates.
	SentAt       *time.Time  `json:"sentAt,omitempty"`
	SentAtNEQ    *time.Time  `json:"sentAtNEQ,omitempty"`
	SentAtIn     []time.Time `json:"sentAtIn,omitempty"`
	SentAtNotIn  []time.Time `json:"sentAtNotIn,omitempty"`
	SentAtGT     *time.Time  `json:"sentAtGT,omitempty"`
	SentAtGTE    *time.Time  `json:"sentAtGTE,omitempty"`
	SentAtLT     *time.Time  `json:"sentAtLT,omitempty"`
	SentAtLTE    *time.Time  `json:"sentAtLTE,omitempty"`
	SentAtIsNil  bool        `json:"sentAtIsNil,omitempty"`
	SentAtNotNil bool        `json:"sentAtNotNil,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *StoreWhereInput) AddPredicates(predicates ...predicate.Store) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the StoreWhereInput filter on the StoreQuery builder.
func (i *StoreWhereInput) Filter(q *StoreQuery) (*StoreQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyStoreWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyStoreWhereInput is returned in case the StoreWhereInput is empty.
var ErrEmptyStoreWhereInput = errors.New("ent: empty predicate StoreWhereInput")

// P returns a predicate for filtering stores.
// An error is returned if the input is empty or invalid.
func (i *StoreWhereInput) P() (predicate.Store, error) {
	var predicates []predicate.Store
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, store.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Store, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, store.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Store, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, store.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, store.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, store.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, store.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, store.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, store.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, store.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, store.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, store.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, store.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, store.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, store.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, store.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, store.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, store.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, store.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, store.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, store.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, store.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, store.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, store.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, store.NameContainsFold(*i.NameContainsFold))
	}
	if i.Location != nil {
		predicates = append(predicates, store.LocationEQ(*i.Location))
	}
	if i.LocationNEQ != nil {
		predicates = append(predicates, store.LocationNEQ(*i.LocationNEQ))
	}
	if len(i.LocationIn) > 0 {
		predicates = append(predicates, store.LocationIn(i.LocationIn...))
	}
	if len(i.LocationNotIn) > 0 {
		predicates = append(predicates, store.LocationNotIn(i.LocationNotIn...))
	}
	if i.LocationGT != nil {
		predicates = append(predicates, store.LocationGT(*i.LocationGT))
	}
	if i.LocationGTE != nil {
		predicates = append(predicates, store.LocationGTE(*i.LocationGTE))
	}
	if i.LocationLT != nil {
		predicates = append(predicates, store.LocationLT(*i.LocationLT))
	}
	if i.LocationLTE != nil {
		predicates = append(predicates, store.LocationLTE(*i.LocationLTE))
	}
	if i.LocationContains != nil {
		predicates = append(predicates, store.LocationContains(*i.LocationContains))
	}
	if i.LocationHasPrefix != nil {
		predicates = append(predicates, store.LocationHasPrefix(*i.LocationHasPrefix))
	}
	if i.LocationHasSuffix != nil {
		predicates = append(predicates, store.LocationHasSuffix(*i.LocationHasSuffix))
	}
	if i.LocationEqualFold != nil {
		predicates = append(predicates, store.LocationEqualFold(*i.LocationEqualFold))
	}
	if i.LocationContainsFold != nil {
		predicates = append(predicates, store.LocationContainsFold(*i.LocationContainsFold))
	}
	if i.OnFoot != nil {
		predicates = append(predicates, store.OnFootEQ(*i.OnFoot))
	}
	if i.OnFootNEQ != nil {
		predicates = append(predicates, store.OnFootNEQ(*i.OnFootNEQ))
	}
	if len(i.OnFootIn) > 0 {
		predicates = append(predicates, store.OnFootIn(i.OnFootIn...))
	}
	if len(i.OnFootNotIn) > 0 {
		predicates = append(predicates, store.OnFootNotIn(i.OnFootNotIn...))
	}
	if i.OnFootGT != nil {
		predicates = append(predicates, store.OnFootGT(*i.OnFootGT))
	}
	if i.OnFootGTE != nil {
		predicates = append(predicates, store.OnFootGTE(*i.OnFootGTE))
	}
	if i.OnFootLT != nil {
		predicates = append(predicates, store.OnFootLT(*i.OnFootLT))
	}
	if i.OnFootLTE != nil {
		predicates = append(predicates, store.OnFootLTE(*i.OnFootLTE))
	}
	if i.OnFootIsNil {
		predicates = append(predicates, store.OnFootIsNil())
	}
	if i.OnFootNotNil {
		predicates = append(predicates, store.OnFootNotNil())
	}
	if i.SentAt != nil {
		predicates = append(predicates, store.SentAtEQ(*i.SentAt))
	}
	if i.SentAtNEQ != nil {
		predicates = append(predicates, store.SentAtNEQ(*i.SentAtNEQ))
	}
	if len(i.SentAtIn) > 0 {
		predicates = append(predicates, store.SentAtIn(i.SentAtIn...))
	}
	if len(i.SentAtNotIn) > 0 {
		predicates = append(predicates, store.SentAtNotIn(i.SentAtNotIn...))
	}
	if i.SentAtGT != nil {
		predicates = append(predicates, store.SentAtGT(*i.SentAtGT))
	}
	if i.SentAtGTE != nil {
		predicates = append(predicates, store.SentAtGTE(*i.SentAtGTE))
	}
	if i.SentAtLT != nil {
		predicates = append(predicates, store.SentAtLT(*i.SentAtLT))
	}
	if i.SentAtLTE != nil {
		predicates = append(predicates, store.SentAtLTE(*i.SentAtLTE))
	}
	if i.SentAtIsNil {
		predicates = append(predicates, store.SentAtIsNil())
	}
	if i.SentAtNotNil {
		predicates = append(predicates, store.SentAtNotNil())
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, store.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, store.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, store.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, store.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, store.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, store.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, store.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, store.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, store.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, store.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, store.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, store.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, store.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, store.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, store.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, store.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyStoreWhereInput
	case 1:
		return predicates[0], nil
	default:
		return store.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
