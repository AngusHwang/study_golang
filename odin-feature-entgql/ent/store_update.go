// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"odin/ent/predicate"
	"odin/ent/store"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreUpdate is the builder for updating Store entities.
type StoreUpdate struct {
	config
	hooks    []Hook
	mutation *StoreMutation
}

// Where appends a list predicates to the StoreUpdate builder.
func (su *StoreUpdate) Where(ps ...predicate.Store) *StoreUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *StoreUpdate) SetName(s string) *StoreUpdate {
	su.mutation.SetName(s)
	return su
}

// SetLocation sets the "location" field.
func (su *StoreUpdate) SetLocation(s string) *StoreUpdate {
	su.mutation.SetLocation(s)
	return su
}

// SetFood sets the "food" field.
func (su *StoreUpdate) SetFood(s []string) *StoreUpdate {
	su.mutation.SetFood(s)
	return su
}

// SetOnFoot sets the "on_foot" field.
func (su *StoreUpdate) SetOnFoot(i int) *StoreUpdate {
	su.mutation.ResetOnFoot()
	su.mutation.SetOnFoot(i)
	return su
}

// SetNillableOnFoot sets the "on_foot" field if the given value is not nil.
func (su *StoreUpdate) SetNillableOnFoot(i *int) *StoreUpdate {
	if i != nil {
		su.SetOnFoot(*i)
	}
	return su
}

// AddOnFoot adds i to the "on_foot" field.
func (su *StoreUpdate) AddOnFoot(i int) *StoreUpdate {
	su.mutation.AddOnFoot(i)
	return su
}

// ClearOnFoot clears the value of the "on_foot" field.
func (su *StoreUpdate) ClearOnFoot() *StoreUpdate {
	su.mutation.ClearOnFoot()
	return su
}

// SetSentAt sets the "sent_at" field.
func (su *StoreUpdate) SetSentAt(t time.Time) *StoreUpdate {
	su.mutation.SetSentAt(t)
	return su
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (su *StoreUpdate) SetNillableSentAt(t *time.Time) *StoreUpdate {
	if t != nil {
		su.SetSentAt(*t)
	}
	return su
}

// ClearSentAt clears the value of the "sent_at" field.
func (su *StoreUpdate) ClearSentAt() *StoreUpdate {
	su.mutation.ClearSentAt()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StoreUpdate) SetUpdatedAt(t time.Time) *StoreUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// Mutation returns the StoreMutation object of the builder.
func (su *StoreUpdate) Mutation() *StoreMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StoreUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StoreUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StoreUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StoreUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StoreUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := store.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StoreUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := store.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Store.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Location(); ok {
		if err := store.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Store.location": %w`, err)}
		}
	}
	return nil
}

func (su *StoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: store.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldName,
		})
	}
	if value, ok := su.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldLocation,
		})
	}
	if value, ok := su.mutation.Food(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: store.FieldFood,
		})
	}
	if value, ok := su.mutation.OnFoot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: store.FieldOnFoot,
		})
	}
	if value, ok := su.mutation.AddedOnFoot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: store.FieldOnFoot,
		})
	}
	if su.mutation.OnFootCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: store.FieldOnFoot,
		})
	}
	if value, ok := su.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldSentAt,
		})
	}
	if su.mutation.SentAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: store.FieldSentAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StoreUpdateOne is the builder for updating a single Store entity.
type StoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoreMutation
}

// SetName sets the "name" field.
func (suo *StoreUpdateOne) SetName(s string) *StoreUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetLocation sets the "location" field.
func (suo *StoreUpdateOne) SetLocation(s string) *StoreUpdateOne {
	suo.mutation.SetLocation(s)
	return suo
}

// SetFood sets the "food" field.
func (suo *StoreUpdateOne) SetFood(s []string) *StoreUpdateOne {
	suo.mutation.SetFood(s)
	return suo
}

// SetOnFoot sets the "on_foot" field.
func (suo *StoreUpdateOne) SetOnFoot(i int) *StoreUpdateOne {
	suo.mutation.ResetOnFoot()
	suo.mutation.SetOnFoot(i)
	return suo
}

// SetNillableOnFoot sets the "on_foot" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableOnFoot(i *int) *StoreUpdateOne {
	if i != nil {
		suo.SetOnFoot(*i)
	}
	return suo
}

// AddOnFoot adds i to the "on_foot" field.
func (suo *StoreUpdateOne) AddOnFoot(i int) *StoreUpdateOne {
	suo.mutation.AddOnFoot(i)
	return suo
}

// ClearOnFoot clears the value of the "on_foot" field.
func (suo *StoreUpdateOne) ClearOnFoot() *StoreUpdateOne {
	suo.mutation.ClearOnFoot()
	return suo
}

// SetSentAt sets the "sent_at" field.
func (suo *StoreUpdateOne) SetSentAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetSentAt(t)
	return suo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableSentAt(t *time.Time) *StoreUpdateOne {
	if t != nil {
		suo.SetSentAt(*t)
	}
	return suo
}

// ClearSentAt clears the value of the "sent_at" field.
func (suo *StoreUpdateOne) ClearSentAt() *StoreUpdateOne {
	suo.mutation.ClearSentAt()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StoreUpdateOne) SetUpdatedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// Mutation returns the StoreMutation object of the builder.
func (suo *StoreUpdateOne) Mutation() *StoreMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StoreUpdateOne) Select(field string, fields ...string) *StoreUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Store entity.
func (suo *StoreUpdateOne) Save(ctx context.Context) (*Store, error) {
	var (
		err  error
		node *Store
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Store)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StoreMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StoreUpdateOne) SaveX(ctx context.Context) *Store {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StoreUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StoreUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StoreUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := store.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StoreUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := store.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Store.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Location(); ok {
		if err := store.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Store.location": %w`, err)}
		}
	}
	return nil
}

func (suo *StoreUpdateOne) sqlSave(ctx context.Context) (_node *Store, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: store.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Store.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for _, f := range fields {
			if !store.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldName,
		})
	}
	if value, ok := suo.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldLocation,
		})
	}
	if value, ok := suo.mutation.Food(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: store.FieldFood,
		})
	}
	if value, ok := suo.mutation.OnFoot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: store.FieldOnFoot,
		})
	}
	if value, ok := suo.mutation.AddedOnFoot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: store.FieldOnFoot,
		})
	}
	if suo.mutation.OnFootCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: store.FieldOnFoot,
		})
	}
	if value, ok := suo.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldSentAt,
		})
	}
	if suo.mutation.SentAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: store.FieldSentAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldUpdatedAt,
		})
	}
	_node = &Store{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
