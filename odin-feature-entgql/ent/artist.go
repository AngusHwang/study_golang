// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"odin/ent/artist"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Artist is the model entity for the Artist schema.
type Artist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ExternalURL holds the value of the "external_url" field.
	ExternalURL string `json:"external_url,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Discord holds the value of the "discord" field.
	Discord string `json:"discord,omitempty"`
	// Recommender holds the value of the "recommender" field.
	Recommender string `json:"recommender,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Artist) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case artist.FieldID:
			values[i] = new(sql.NullInt64)
		case artist.FieldName, artist.FieldExternalURL, artist.FieldPhoneNumber, artist.FieldDiscord, artist.FieldRecommender:
			values[i] = new(sql.NullString)
		case artist.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Artist", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Artist fields.
func (a *Artist) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case artist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case artist.FieldExternalURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_url", values[i])
			} else if value.Valid {
				a.ExternalURL = value.String
			}
		case artist.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				a.PhoneNumber = value.String
			}
		case artist.FieldDiscord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord", values[i])
			} else if value.Valid {
				a.Discord = value.String
			}
		case artist.FieldRecommender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recommender", values[i])
			} else if value.Valid {
				a.Recommender = value.String
			}
		case artist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Artist.
// Note that you need to call Artist.Unwrap() before calling this method if this Artist
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Artist) Update() *ArtistUpdateOne {
	return (&ArtistClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Artist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Artist) Unwrap() *Artist {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Artist is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Artist) String() string {
	var builder strings.Builder
	builder.WriteString("Artist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("external_url=")
	builder.WriteString(a.ExternalURL)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(a.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("discord=")
	builder.WriteString(a.Discord)
	builder.WriteString(", ")
	builder.WriteString("recommender=")
	builder.WriteString(a.Recommender)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Artists is a parsable slice of Artist.
type Artists []*Artist

func (a Artists) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
