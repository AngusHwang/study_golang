// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"odin/ent/store"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Store is the model entity for the Store schema.
type Store struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Food holds the value of the "food" field.
	Food []string `json:"food,omitempty"`
	// OnFoot holds the value of the "on_foot" field.
	OnFoot int `json:"on_foot,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Store) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case store.FieldFood:
			values[i] = new([]byte)
		case store.FieldID, store.FieldOnFoot:
			values[i] = new(sql.NullInt64)
		case store.FieldName, store.FieldLocation:
			values[i] = new(sql.NullString)
		case store.FieldSentAt, store.FieldCreatedAt, store.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Store", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Store fields.
func (s *Store) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case store.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case store.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case store.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				s.Location = value.String
			}
		case store.FieldFood:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field food", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Food); err != nil {
					return fmt.Errorf("unmarshal field food: %w", err)
				}
			}
		case store.FieldOnFoot:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field on_foot", values[i])
			} else if value.Valid {
				s.OnFoot = int(value.Int64)
			}
		case store.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				s.SentAt = value.Time
			}
		case store.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case store.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Store.
// Note that you need to call Store.Unwrap() before calling this method if this Store
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Store) Update() *StoreUpdateOne {
	return (&StoreClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Store entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Store) Unwrap() *Store {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Store is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Store) String() string {
	var builder strings.Builder
	builder.WriteString("Store(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(s.Location)
	builder.WriteString(", ")
	builder.WriteString("food=")
	builder.WriteString(fmt.Sprintf("%v", s.Food))
	builder.WriteString(", ")
	builder.WriteString("on_foot=")
	builder.WriteString(fmt.Sprintf("%v", s.OnFoot))
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(s.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Stores is a parsable slice of Store.
type Stores []*Store

func (s Stores) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
